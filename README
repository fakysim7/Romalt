# Telegram AI Bot

Телеграм-бот с интеграцией AI21 API и RAG-системой для поиска актуальной информации.

# Основные функции

- Чат с AI-ассистентом через AI21 Jamba
- RAG-система для проверки фактов через веб-поиск
- Mini App для взаимодействия через веб-интерфейс
- Поддержка временных запросов (время в Беларуси)
- Короткая память пользователя (последние запросы и сущности)

# Технологии

- Backend: Python, aiogram 3.x, aiohttp
- AI: AI21 Studio (Jamba-instruct)
- Поиск: Google Search + BeautifulSoup
- Хостинг: Render (с keep-alive)
- Дополнительно: RAG-система, кэширование, CORS

# Установка и запуск

1. Клонировать репозиторий
2. Установить зависимости:
   pip install aiogram aiohttp ai21 python-dotenv beautifulsoup4 pytz
Создать .env файл:


BOT_TOKEN=your_telegram_bot_token
AI21_API_KEY=your_ai21_api_key
WEBHOOK_HOST=https://your-app.onrender.com
PORT=8080

Запустить:

python main.py
Структура проекта

main.py - точка входа, веб-сервер, webhook

config.py - конфигурация и переменные окружения

user.py - обработчики сообщений и Mini App API

ai_21.py - интеграция с AI21 и RAG-логика

rag_system.py - RAG-система с веб-поиском

web_search.py - поиск и парсинг веб-страниц

Endpoints
GET / - информация о боте

GET /health - проверка здоровья

POST /api/chat - API для Mini App

POST /webhook/bot - Webhook для Telegram

Особенности
Keep-alive для предотвращения сна на Render

CORS для Mini App

Кэширование поисковых запросов

Очистка HTML-контента

Поддержка временных зон

# Использование

# Чат в Telegram
Просто отправьте текстовое сообщение боту для получения ответа.

# Mini App
1. Отправьте команду `/mini_app`
2. Нажмите кнопку "Открыть Mini App"
3. Используйте веб-интерфейс для общения с ботом

# Особенности работы

RAG-система:
- Автоматически ищет актуальную информацию в интернете
- Проверяет факты (числа и даты) через поиск
- Кэширует результаты для оптимизации

Память пользователя:
- Сохраняет последние 10 запросов
- Извлекает сущности (имена, места)
- Использует контекст для более релевантных ответов

Временные запросы:
- Отвечает на вопросы о текущем времени в Беларуси
- Формат: "Который час?", "Сколько времени?"


# Переменные окружения
```env
BOT_TOKEN=your_telegram_bot_token_here
AI21_API_KEY=your_ai21_api_key_here
WEBHOOK_HOST=https://your-deployed-app.url
PORT=8080
Модели AI21
По умолчанию используется jamba-large, но можно изменить в вызове функции:

answer = await ask_ai21_with_rag(messages, model="jamba-instruct")


#Развертывание

На Render
Подключите репозиторий

Укажите переменные окружения

Используйте стартовую команду: python main.py

Бот автоматически настроит webhook

Локальная разработка
python main.py
Архитектура
main.py (веб-сервер + webhook)
├── user.py (обработчики сообщений + Mini App API)
├── ai_21.py (AI21 интеграция + RAG логика)
├── rag_system.py (RAG система)
├── web_search.py (веб-поиск)
└── config.py (конфигурация)
Ограничения
Веб-поиск через HTML-парсинг (лучше использовать официальные API)

Ограничение на размер контекста: 4000 символов

Кэш работает в памяти (сбрасывается при перезапуске)

Разработка
Добавление новых функций
Создайте обработчик в user.py

Добавьте соответствующую логику в ai_21.py

При необходимости расширьте RAG-систему

Логирование
Настроено логирование через logger.py, логи включают:

Временные метки

Уровни важности

Имена модулей
