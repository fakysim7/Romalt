# ai_21.py
from ai21 import AI21Client
from ai21.models.chat import ChatMessage
from services.rag_system import RAGSystem
import os, logging, re
from datetime import datetime
import pytz

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RAG —Å–∏—Å—Ç–µ–º—ã
rag_system = RAGSystem(always_enabled=True)

# –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏
# {user_id: {"last_queries": [], "last_entities": {}}}
user_memory = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ë–µ–ª–∞—Ä—É—Å–∏
def get_current_time_belarus():
    tz = pytz.timezone("Europe/Minsk")
    now = datetime.now(tz)
    return now.strftime("%H:%M:%S")

async def ask_ai21_with_rag(messages: list, user_id: str = None, model="jamba-large", max_tokens=1024) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ AI21 —Å RAG, –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç—å—é –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    """
    try:
        user_msg = messages[-1]["content"] if messages else ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
        if any(w in user_msg.lower() for w in ["–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å", "—Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å", "–≤—Ä–µ–º—è"]):
            current_time = get_current_time_belarus()
            messages.append({"role": "system", "content": f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–µ–ª–∞—Ä—É—Å–∏: {current_time}"})

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_queries = []
        last_entities = {}
        if user_id and user_id in user_memory:
            last_queries = user_memory[user_id]["last_queries"][-10:]
            last_entities = user_memory[user_id]["last_entities"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context_hint = ""
        if last_entities:
            entities_text = ", ".join(f"{k}: {v}" for k, v in last_entities.items())
            context_hint = f"\n–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {entities_text}"

        system_message = f"""
–¢—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–µ–ª–∞—Ä—É—Å–∏.
–û—Ç–≤–µ—á–∞–π —Å —É—á—ë—Ç–æ–º –º–µ—Å—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.
–ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è): {last_queries if last_queries else '–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏'}
{context_hint}
        """

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
        chat_messages = [ChatMessage(role="system", content=system_message)]
        chat_messages += [ChatMessage(role=m["role"], content=m["content"]) for m in messages]

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        client = AI21Client(api_key=os.getenv("AI21_API_KEY"))
        response = client.chat.completions.create(
            model=model,
            messages=chat_messages,
            max_tokens=max_tokens,
            temperature=0.1
        )
        answer = response.choices[0].message.content

        # –§–∞–∫—Ç—á–µ–∫–∏–Ω–≥ —á–µ—Ä–µ–∑ RAG (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ –¥–∞—Ç—ã)
        facts = re.findall(r'\d{1,4}|\d{1,2}[./-]\d{1,2}[./-]\d{2,4}', answer)
        verified = {}
        for fact in facts:
            context = await rag_system.get_relevant_context(f"{fact} –ë–µ–ª–∞—Ä—É—Å—å")
            verified[fact] = "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" if "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" not in context.lower() else "‚ö†Ô∏è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"


        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id:
            if user_id not in user_memory:
                user_memory[user_id] = {"last_queries": [], "last_entities": {}}

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_memory[user_id]["last_queries"].append(user_msg)
            if len(user_memory[user_id]["last_queries"]) > 10:
                user_memory[user_id]["last_queries"].pop(0)

            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º–µ–Ω–∞, –º–µ—Å—Ç–∞)
            entity_match = re.findall(r'\b[–ê-–Ø–Å][–∞-—è—ë]+\b', user_msg)
            if entity_match:
                user_memory[user_id]["last_entities"]["–∏–º—è"] = entity_match[-1]  # –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø–æ–º—è–Ω—É—Ç–æ–µ —Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π

        return answer

    except Exception as e:
        logger.error(f"AI21 RAG error: {e}")
        return "üîç –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

async def close_rag_system():
    await rag_system.close()
