import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from config import BOT_TOKEN
from handlers import user
from handlers.user import setup_web_routes
from utils.logger import setup_logger
import os

logger = setup_logger()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è webhook
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://your-domain.com")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
WEBHOOK_PATH = "/webhook/bot"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å ngrok –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
# WEBHOOK_HOST = "https://abc123.ngrok-free.app"

# –ü–æ—Ä—Ç
PORT = int(os.getenv("PORT", 8080))

async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL:
        await bot.set_webhook(
            url=WEBHOOK_URL,
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query", "web_app_data"]
        )
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.info(f"‚ÑπÔ∏è Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("üõë Webhook —É–¥–∞–ª–µ–Ω, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(user.router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup –∏ shutdown —Ö—É–∫–∏
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler –¥–ª—è Telegram
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_handler.register(app, path=WEBHOOK_PATH)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç—ã –¥–ª—è Mini App API
    setup_web_routes(app)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    setup_application(app, dp, bot=bot)
    
    # Health check endpoint
    async def health_check(request):
        return web.json_response({
            "status": "ok", 
            "webhook": WEBHOOK_URL,
            "version": "1.0.0"
        })
    
    # Favicon handler (—á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –Ω–µ –≤—ã–¥–∞–≤–∞–ª –æ—à–∏–±–∫–∏)
    async def favicon_handler(request):
        return web.Response(status=204)
    
    # Root endpoint
    async def root_handler(request):
        return web.json_response({
            "bot": "Telegram AI Bot",
            "status": "running",
            "endpoints": {
                "webhook": WEBHOOK_PATH,
                "api": "/api/chat",
                "health": "/health"
            }
        })
    
    app.router.add_get('/health', health_check)
    app.router.add_get('/favicon.ico', favicon_handler)
    app.router.add_get('/', root_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    logger.info(f"üì° Webhook URL: {WEBHOOK_URL}")
    logger.info(f"üîß API endpoint: http://0.0.0.0:{PORT}/api/chat")
    logger.info(f"‚ù§Ô∏è Health check: http://0.0.0.0:{PORT}/health")
    
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
