from aiogram import Router, types, F
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
)
import json
import logging
from API.ai_21 import ask_ai21_with_rag
from aiohttp import web

logger = logging.getLogger(__name__)
router = Router()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
@router.message(F.text & F.text.startswith("/mini_app"))
async def send_mini_app_inline(message: types.Message):
    web_app = WebAppInfo(url="https://ai-mini-app.wuaze.com")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=web_app)]
    ])
    await message.answer(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(F.text & F.text.startswith("/start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "üìù –ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!\n"
        "üöÄ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /mini_app –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —á–∞—Ç–µ
@router.message(F.text & ~F.text.startswith("/"))
async def handle_chat_message(message: types.Message):
    try:
        user_msg = message.text
        messages = [{"role": "user", "content": user_msg}]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        answer = await ask_ai21_with_rag(messages, user_id=str(message.from_user.id))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
        await message.answer(answer)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# HTTP endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ Mini App
async def handle_mini_app_request(request):
    try:
        data = await request.json()
        user_id = data.get("user_id")
        user_msg = data.get("text", "")
        request_id = data.get("request_id")
        
        logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∏–∑ Mini App –æ—Ç {user_id}: {user_msg[:50]}...")
        
        if not user_msg:
            return web.json_response(
                {"success": False, "error": "Missing text parameter"}, 
                status=400
            )
        
        messages = [{"role": "user", "content": user_msg}]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        answer = await ask_ai21_with_rag(messages, user_id=str(user_id))
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {answer[:50]}...")
        
        return web.json_response({
            "success": True,
            "answer": answer,
            "request_id": request_id
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ Mini App: {e}", exc_info=True)
        return web.json_response({
            "success": False,
            "error": str(e)
        }, status=500)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
def setup_web_routes(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API endpoints –¥–ª—è Mini App"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è —á–∞—Ç–∞
    app.router.add_post('/api/chat', handle_mini_app_request)
    
    # CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mini App
    @web.middleware
    async def cors_middleware(request, handler):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        if request.method == 'OPTIONS':
            return web.Response(
                headers={
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                    'Access-Control-Max-Age': '86400'
                }
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        try:
            response = await handler(request)
            response.headers['Access-Control-Allow-Origin'] = '*'
            response.headers['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS'
            response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
            return response
        except Exception as e:
            logger.error(f"Error in CORS middleware: {e}")
            return web.json_response(
                {"error": "Internal server error"}, 
                status=500,
                headers={'Access-Control-Allow-Origin': '*'}
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    app.middlewares.append(cors_middleware)
    
    logger.info("‚úÖ Web routes –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
    logger.info("   üì° POST /api/chat - Mini App API")
    logger.info("   üîß GET /health - Health check")
