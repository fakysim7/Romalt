from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import logging
from services.rag_system import RAGSystem  # —Ç–≤–æ—è RAG —Å–∏—Å—Ç–µ–º–∞
from API.ai_21 import ask_ai21_with_rag
from aiohttp import web
import asyncio

logger = logging.getLogger(__name__)
router = Router()
rag_system = RAGSystem()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
@router.message(F.text & F.text.startswith("/mini_app"))
async def send_mini_app_inline(message: types.Message):
    web_app = WebAppInfo(url="https://ai-mini-app.wuaze.com")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=web_app)]
    ])
    await message.answer(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

# /start
@router.message(F.text & F.text.startswith("/start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "üìù –ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!\n"
        "üöÄ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /mini_app –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App"
    )

# –ß–∞—Ç –≤ Telegram —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
@router.message(F.text & ~F.text.startswith("/"))
async def handle_chat_message(message: types.Message):
    user_msg = message.text
    user_id = str(message.from_user.id)

    try:
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing
        await message.bot.send_chat_action(message.chat.id, "typing")

        # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ RAG
        context = await rag_system.get_relevant_context(user_msg)

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        messages = [
            {"role": "user", "content": f"{user_msg}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"}
        ]

        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI21
        answer = await ask_ai21_with_rag(messages, user_id=user_id)

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(answer)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# HTTP endpoint –¥–ª—è Mini App
async def handle_mini_app_request(request):
    try:
        data = await request.json()
        user_id = data.get("user_id")
        user_msg = data.get("text", "")
        request_id = data.get("request_id")
        
        if not user_msg:
            return web.json_response({"success": False, "error": "Missing text parameter"}, status=400)

        # RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = await rag_system.get_relevant_context(user_msg)
        messages = [{"role": "user", "content": f"{user_msg}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"}]

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI
        answer = await ask_ai21_with_rag(messages, user_id=str(user_id))

        return web.json_response({
            "success": True,
            "answer": answer,
            "request_id": request_id
        })

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ Mini App")
        return web.json_response({"success": False, "error": str(e)}, status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–º–∞—Ä—à—Ä—É—Ç–æ–≤
def setup_web_routes(app):
    app.router.add_post('/api/chat', handle_mini_app_request)

    @web.middleware
    async def cors_middleware(request, handler):
        if request.method == 'OPTIONS':
            return web.Response(headers={
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Max-Age': '86400'
            })
        resp = await handler(request)
        resp.headers['Access-Control-Allow-Origin'] = '*'
        return resp

    app.middlewares.append(cors_middleware)
    logger.info("‚úÖ Web routes –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: /api/chat, /health, /")
