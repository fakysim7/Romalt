from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import logging
from API.ai_21 import ask_ai21_with_rag
from aiohttp import web
from rag_system import RAGSystem  # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ç–≤–æ—é —Å–∏—Å—Ç–µ–º—É RAG

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG
rag = RAGSystem(always_enabled=True)

# --------------------
# Mini App —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
# --------------------
@router.message(F.text & F.text.startswith("/mini_app"))
async def send_mini_app_inline(message: types.Message):
    web_app = WebAppInfo(url="https://ai-mini-app.wuaze.com")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=web_app)]
    ])
    sent_msg = await message.answer(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App:",
        reply_markup=keyboard
    )

    try:
        await message.bot.pin_chat_message(message.chat.id, sent_msg.message_id, disable_notification=True)
        logger.info(f"Mini App –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {message.chat.id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# --------------------
# /start
# --------------------
@router.message(F.text & F.text.startswith("/start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "üìù –ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!\n"
        "üöÄ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /mini_app –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App"
    )

# --------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å RAG
# --------------------
@router.message(F.text & ~F.text.startswith("/"))
async def handle_chat_message(message: types.Message):
    user_msg = message.text

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞—é..."
        typing_msg = await message.answer("‚è≥ –ü–µ—á–∞—Ç–∞—é...")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG
        context = await rag.get_relevant_context(user_msg)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI21 + RAG
        messages = [{"role": "user", "content": user_msg}, {"role": "system", "content": context}]
        answer = await ask_ai21_with_rag(messages, user_id=str(message.from_user.id))

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞—é..."
        await typing_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(answer)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --------------------
# HTTP endpoint –¥–ª—è Mini App
# --------------------
async def handle_mini_app_request(request):
    try:
        data = await request.json()
        user_id = data.get("user_id")
        user_msg = data.get("text", "")
        request_id = data.get("request_id")

        logger.info(f"üì± Mini App –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {user_msg[:50]}")

        if not user_msg:
            return web.json_response({"success": False, "error": "Missing text"}, status=400)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ RAG
        context = await rag.get_relevant_context(user_msg)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
        messages = [{"role": "user", "content": user_msg}, {"role": "system", "content": context}]
        answer = await ask_ai21_with_rag(messages, user_id=str(user_id))

        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è {user_id} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        return web.json_response({"success": True, "answer": answer, "request_id": request_id})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Mini App: {e}", exc_info=True)
        return web.json_response({"success": False, "error": str(e)}, status=500)

# --------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ web routes
# --------------------
def setup_web_routes(app):
    app.router.add_post('/api/chat', handle_mini_app_request)

    # CORS middleware
    @web.middleware
    async def cors_middleware(request, handler):
        if request.method == 'OPTIONS':
            return web.Response(headers={
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Max-Age': '86400'
            })
        try:
            resp = await handler(request)
            resp.headers['Access-Control-Allow-Origin'] = '*'
            resp.headers['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS'
            resp.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
            return resp
        except web.HTTPException as e:
            e.headers['Access-Control-Allow-Origin'] = '*'
            raise
        except Exception as e:
            logger.error(f"Unexpected error in CORS middleware: {e}", exc_info=True)
            return web.json_response({"error": "Internal server error"}, status=500, headers={'Access-Control-Allow-Origin': '*'})

    app.middlewares.append(cors_middleware)

    logger.info("‚úÖ Web routes –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: /api/chat, /health, /")
