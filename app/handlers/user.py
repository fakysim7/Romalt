from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import logging
from services.rag_system import RAGSystem
from API.ai_21 import ask_ai21_with_rag
from aiohttp import web, ClientSession

logger = logging.getLogger(__name__)
router = Router()
rag_system = RAGSystem()

API_URL = "https://ai-sber.onrender.com/api/chat"  # –≤–∞—à endpoint Mini App / API

# --- /mini_app ---
@router.message(F.text & F.text.startswith("/mini_app"))
async def send_mini_app_inline(message: types.Message):
    web_app = WebAppInfo(url="https://ai-mini-app.wuaze.com")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=web_app)]
    ])
    await message.answer(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

# --- /start ---
@router.message(F.text & F.text.startswith("/start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "üìù –ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!\n"
        "üöÄ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /mini_app –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App"
    )

# --- –æ–±—ã—á–Ω—ã–π —á–∞—Ç —Å POST –∫ API –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ ---
@router.message(F.text & ~F.text.startswith("/"))
async def handle_user_chat(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await message.bot.send_chat_action(message.chat.id, "typing")
    
    # POST –∫ Mini App API
    async with ClientSession() as session:
        try:
            async with session.post(API_URL, json={"user_id": message.from_user.id, "text": message.text}) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    answer = data.get("answer", "‚ùå –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
                else:
                    logger.warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                    answer = "‚ùå –û—à–∏–±–∫–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ POST –∫ API: {e}")
            answer = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º."

    await message.answer(answer)

# --- Mini App endpoint ---
async def handle_mini_app_request(request):
    try:
        data = await request.json()
        user_id = data.get("user_id")
        user_msg = data.get("text", "")
        request_id = data.get("request_id")

        if not user_msg:
            return web.json_response({"success": False, "error": "Missing text parameter"}, status=400)

        context = await rag_system.get_relevant_context(user_msg)
        messages = [{"role": "user", "content": f"{user_msg}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"}]
        answer = await ask_ai21_with_rag(messages, user_id=str(user_id))

        return web.json_response({
            "success": True,
            "answer": answer,
            "request_id": request_id
        })
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ Mini App")
        return web.json_response({"success": False, "error": str(e)}, status=500)

def setup_web_routes(app):
    app.router.add_post('/api/chat', handle_mini_app_request)

    async def health_check(request):
        return web.json_response({"status": "ok"})

    app.router.add_get('/health', health_check)

    @web.middleware
    async def cors_middleware(request, handler):
        if request.method == 'OPTIONS':
            return web.Response(headers={
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Max-Age': '86400'
            })
        resp = await handler(request)
        resp.headers['Access-Control-Allow-Origin'] = '*'
        return resp

    app.middlewares.append(cors_middleware)
    logger.info("‚úÖ Web routes –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: /api/chat, /health")
